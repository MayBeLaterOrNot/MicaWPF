steps:
- pwsh: |
        $url = "https://azuresearch-usnc.nuget.org/query?q=MicaWPF&prerelease=false"
        $packageInfo = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"}
        Write-Host "Pipeline = $($packageInfo | ConvertTo-Json -Depth 100)"
        $versionList;
        
        foreach ($versionlocal in $packageInfo.data.versions)
        {
              $versionList += [version[]]$versionlocal.version
        }
        $sortedVersions = $versionList | Sort-Object -Descending | foreach {$_.ToString()}
        $version = $sortedVersions[0]
        
        Write-Host $version
        $sp = $version.Split(".")
        echo $sp
        $majorVersion = $sp[0]
        $minorVersion = $sp[1]
        $patchVersion = [int]$sp[2] + 1
        $productVersionBeta = “$majorVersion.$minorVersion.$patchVersion.$(Build.BuildId)-Beta”
        Write-Host "##vso[task.setvariable variable=packageVersion]$version"
  displayName: "Computing alpha version"
  condition: eq(variables['buildTag'], False)
  
- task: NuGetToolInstaller@1
  displayName: 'Installing Nuget 6.0.0'
  inputs:
    versionSpec: '6.0.0'
    
- task: UseDotNet@2
  displayName: 'Use .Net Core 3.1'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    includePreviewVersions: false
    
- task: UseDotNet@2
  displayName: 'Use .Net 5.0'
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
    includePreviewVersions: false
    
- task: UseDotNet@2
  displayName: 'Use .Net 6.0'
  inputs:
    packageType: 'sdk'
    version: '6.0.x'
    includePreviewVersions: false
    
- task: DotNetCoreCLI@2
  displayName: .Net Restore
  inputs:
    command: restore
    projects: '**\*!(Demo).csproj'

- task: DotNetCoreCLI@2
  displayName: .Net Build (Alpha)
  condition: eq(variables['buildTag'], False)
  inputs:
    command: 'build'
    configuration: Release
    projects: '**\*!(Demo).csproj'
    arguments: '-c Release --no-restore'
    versioningScheme: byEnvVar
    versionEnvVar: '$(packageVersion).$(buildId)-Alpha'
    
- task: DotNetCoreCLI@2
  displayName: .Net Build (Release)
  condition: eq(variables['buildTag'], True)
  inputs:
    command: 'build'
    configuration: Release
    projects: '**\*!(Demo).csproj'
    arguments: '-c Release --no-restore'
    versioningScheme: byEnvVar
    versionEnvVar: '$(buildTag)'

- task: ado-discord-webhook@1
  displayName: Publish test results
  condition: succeededOrFailed()
  inputs:
    channelId: '892075724847079494'
    webhookKey: 'S3CPGp0vqpF-azkSH-LSxjUf47h3LrTliK7M7QZlJV2GacMn1sQe4OVvpqrItEVd1sBf'
    name: 'Azure DevOps'
    avatar: 'https://cdn.iconscout.com/icon/free/png-256/azure-devops-3628645-3029870.png'
    messageType: 'embeds'
    embeds: |
      [{
            "title": "Azure Build Pipeline",
            "description": "Build [$(Build.BuildNumber)](https://dev.azure.com/ZirconCloud/web/build.aspx?builduri=$(Build.BuildUri)) $(Agent.JobStatus)\n",
            "fields": [
              {
                "name": "Project",
                "value": "MicaWPF",
                "inline": true
              },
              {
                "name": "Id",
                "value": "$(Build.BuildId)",
                "inline": true
              }
            ]
          }]
